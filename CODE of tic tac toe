import tkinter as tk
import math

# Initialize empty board
board = [[' ' for _ in range(3)] for _ in range(3)]

# Check for a win
def check_winner(b, player):
    for row in b:
        if all(cell == player for cell in row):
            return True
    for col in range(3):
        if all(row[col] == player for row in b):
            return True
    if all(b[i][i] == player for i in range(3)):
        return True
    if all(b[i][2 - i] == player for i in range(3)):
        return True
    return False

# Check if board is full
def is_board_full(b):
    return all(cell != ' ' for row in b for cell in row)

# Minimax algorithm
def minimax(b, depth, is_max):
    if check_winner(b, 'O'):
        return 1
    if check_winner(b, 'X'):
        return -1
    if is_board_full(b):
        return 0

    if is_max:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                if b[i][j] == ' ':
                    b[i][j] = 'O'
                    best = max(best, minimax(b, depth + 1, False))
                    b[i][j] = ' '
        return best
    else:
        best = math.inf
        for i in range(3):
            for j in range(3):
                if b[i][j] == ' ':
                    b[i][j] = 'X'
                    best = min(best, minimax(b, depth + 1, True))
                    b[i][j] = ' '
        return best

# Find best move for AI
def best_move():
    best_score = -math.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                score = minimax(board, 0, False)
                board[i][j] = ' '
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Button click handler
def on_click(row, col):
    if board[row][col] == ' ' and not check_winner(board, 'X') and not check_winner(board, 'O'):
        board[row][col] = 'X'
        buttons[row][col].config(text='X', state=tk.DISABLED)
        if check_winner(board, 'X'):
            status_label.config(text="You win!")
            disable_all_buttons()
            return
        if is_board_full(board):
            status_label.config(text="It's a draw!")
            return
        
        ai_row, ai_col = best_move()
        if ai_row is not None:
            board[ai_row][ai_col] = 'O'
            buttons[ai_row][ai_col].config(text='O', state=tk.DISABLED)
            if check_winner(board, 'O'):
                status_label.config(text="AI wins!")
                disable_all_buttons()
                return
            if is_board_full(board):
                status_label.config(text="It's a draw!")

# Disable buttons after game ends
def disable_all_buttons():
    for i in range(3):
        for j in range(3):
            buttons[i][j].config(state=tk.DISABLED)

# GUI setup
root = tk.Tk()
root.title("Tic-Tac-Toe AI (Unbeatable)")

buttons = [[None for _ in range(3)] for _ in range(3)]

for i in range(3):
    for j in range(3):
        button = tk.Button(root, text=' ', font=('Arial', 40), width=5, height=2,
                           command=lambda row=i, col=j: on_click(row, col))
        button.grid(row=i, column=j)
        buttons[i][j] = button

status_label = tk.Label(root, text="Your turn!", font=('Arial', 16))
status_label.grid(row=3, column=0, columnspan=3)

root.mainloop()
